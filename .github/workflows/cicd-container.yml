name: CI/CD Pipeline

on:
    pull_request:
        branches: [main, development]
    push:
        branches: [main, development]
        tags: ['v*.*.*']
    workflow_dispatch:

permissions:
    contents: read
    packages: write
    security-events: write

env:
    REGISTRY: ghcr.io
    PYTHON_VERSION: '3.13'

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            image_base: ${{ steps.vars.outputs.image_base }}
            pr_tag: ${{ steps.vars.outputs.pr_tag }}
            commit_sha: ${{ steps.vars.outputs.commit_sha }}
            commit_sha_short: ${{ steps.vars.outputs.commit_sha_short }}
            test_image_tag: ${{ steps.vars.outputs.test_image_tag }}
        steps:
            - name: Compute image vars
              id: vars
              shell: bash
              run: |
                set -euo pipefail
                ORG="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
                REPO="$(basename "${GITHUB_REPOSITORY}")"
                IMAGE_BASE="${REGISTRY}/${ORG}/${REPO}"
                echo "image_base=${IMAGE_BASE}" >> "$GITHUB_OUTPUT"

                COMMIT_SHA="${GITHUB_SHA}"
                SHORT_SHA="${COMMIT_SHA:0:12}"
                echo "commit_sha=${COMMIT_SHA}" >> "$GITHUB_OUTPUT"
                echo "commit_sha_short=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

                # Logic to set the primary tag for testing and scanning steps
                if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
                    PR_NUM="${{ github.event.pull_request.number }}"
                    TEST_TAG="pr-${PR_NUM}-build"
                # For manual runs or pushes, use the short commit SHA
                else
                    TEST_TAG="${SHORT_SHA}"
                fi
                echo "test_image_tag=${TEST_TAG}" >> "$GITHUB_OUTPUT"

    build-and-scan-troute-rnr:
        name: Build and Scan troute-rnr Container
        runs-on: ubuntu-latest
        needs: setup
        steps:
          - uses: actions/checkout@v4
          - name: Build troute-rnr image for scanning
            id: build-troute-rnr
            uses: docker/build-push-action@v6
            with:
              context: .
              file: ./ecs/worker/Dockerfile
              load: true
              tags: ${{ needs.setup.outputs.image_base }}/troute-rnr:${{ needs.setup.outputs.test_image_tag }}
          - name: Scan troute-rnr container with Trivy
            uses: aquasecurity/trivy-action@0.20.0
            with:
              image-ref: ${{ needs.setup.outputs.image_base }}/troute-rnr:${{ needs.setup.outputs.test_image_tag }}
              format: 'template'
              template: '@/contrib/sarif.tpl'
              output: 'trivy-results-troute-rnr.sarif'
              severity: 'CRITICAL,HIGH'
          - name: Upload troute-rnr Trivy SARIF
            uses: github/codeql-action/upload-sarif@v3
            with:
              sarif_file: 'trivy-results-troute-rnr.sarif'
              category: 'troute-rnr-container'

    codeql-scan:
        name: CodeQL Scan
        if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        permissions:
            actions: read
            contents: read
            security-events: write
        steps:
          - uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: ${{ env.PYTHON_VERSION }}
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: python
          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v3

    publish-troute-rnr:
        name: Publish troute-rnr to Registry
        if: >
          (github.event_name == 'push' && (
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/development' ||
            startsWith(github.ref, 'refs/tags/v')
          )) ||
          (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
        runs-on: ubuntu-latest
        needs: [setup, build-and-scan-troute-rnr, codeql-scan]
        steps:
          - uses: actions/checkout@v4
          - name: Prepare troute-rnr image tags
            id: prep_tags
            run: |
              # Always start with the unique commit SHA tag for traceability
              TAGS="${{ needs.setup.outputs.image_base }}/troute-rnr:${{ needs.setup.outputs.commit_sha_short }}"

              # If it's a push to the main branch, also add the 'latest' tag
              if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                TAGS="$TAGS,${{ needs.setup.outputs.image_base }}/troute-rnr:latest"
              fi

              # If the trigger was a version tag, add that version as a tag
              if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
                # github.ref_name holds the tag name (e.g., "v1.0.0")
                VERSION_TAG=${{ github.ref_name }}
                TAGS="$TAGS,${{ needs.setup.outputs.image_base }}/troute-rnr:${VERSION_TAG}"
              fi

              echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
          - name: Log in to registry
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
          - name: Build & push troute-rnr image
            uses: docker/build-push-action@v6
            with:
              context: .
              file: ./ecs/worker/Dockerfile
              push: true
              tags: ${{ steps.prep_tags.outputs.tags }}
