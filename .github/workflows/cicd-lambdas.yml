name: Build Lambda and Layer Zips

on:
  push:
    branches:
      - main
    paths:
      - 'lambdas/**'
      - 'lambda_layers/**'
      - '!lambdas/README.md'
  workflow_dispatch:


jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build Lambda Layer packages
        run: |
          # Create the distribution directory at the project root.
          mkdir -p dist

          # Check if the lambda_layers directory exists before trying to build
          if [ -d "lambda_layers" ]; then
            for dir in lambda_layers/*/ ; do
              name=$(basename "$dir")
              echo "--- Packaging Lambda Layer: ${name} ---"
              
              # Install dependencies into the required 'python' directory structure for layers
              pip install -r "${dir}requirements.txt" -t "${dir}python"

              # Go into the layer directory to create the zip from its contents
              cd "$dir"
              zip -r "../../dist/${name}.zip" .
              
              # Return to the project root
              cd ../..
            done
          else
            echo "No lambda_layers directory found, skipping layer packaging."
          fi

      - name: Build Lambda Function packages
        run: |
          for dir in lambdas/*/ ; do
            name=$(basename "$dir")
            echo "--- Packaging Lambda Function: ${name} ---"
            
            # Create a temporary packaging directory inside the lambda's folder
            mkdir -p "${dir}package"

            # Intelligently handle dependency installation
            if [ -f "${dir}pyproject.toml" ]; then
              echo "Installing dependencies from pyproject.toml"
              # Use pip to install the package defined by pyproject.toml into the 'package' dir
              pip install "${dir}." -t "${dir}package"
            elif [ -f "${dir}requirements.txt" ]; then
              echo "Installing dependencies from requirements.txt"
              pip install -r "${dir}requirements.txt" -t "${dir}package"
            else
              echo "No dependency file found for ${name}."
            fi

            # Copy source code, handling both flat and 'src' layouts
            if [ -d "${dir}src" ]; then
                echo "Copying source from src/ directory"
                cp -r ${dir}src/* "${dir}package/"
            fi
            # Copy any .py files from the root of the lambda's directory
            cp ${dir}*.py "${dir}package/" 2>/dev/null || true
            
            # Go into the package directory to create the zip
            cd "${dir}package"
            zip -r "../../../dist/${name}.zip" .

            # Return to the project root
            cd ../../..
          done

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-artifacts
          path: dist/*.zip